use ethers::prelude::*;
use std::convert::TryFrom;
use std::sync::Arc;
use ethers::signers::{LocalWallet, Signer};
use ethers::types::{Address, U256};

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    // 连接到 BSC 节点
    let provider = Provider::<Http>::try_from("https://bsc-dataseed.binance.org/")?;
    let provider = Arc::new(provider);

    // 发送者地址和私钥
    let private_key = "YOUR_PRIVATE_KEY";
    let wallet: LocalWallet = private_key.parse()?;
    let wallet = wallet.with_chain_id(56u64); // BSC 主网 Chain ID 是 56

    // 连接钱包和提供者
    let client = SignerMiddleware::new(provider.clone(), wallet);
    let client = Arc::new(client);

    // 接收者地址
    let recipient: Address = "0xRecipientAddress".parse()?;

    // NFT 合约地址和 Token ID
    let nft_contract_address: Address = "0xYourNFTContractAddress".parse()?;
    let token_id = U256::from(1234u64);

    // 加载 ERC-721 合约
    let abi: Abi = serde_json::from_str(r#"[{
        "constant": false,
        "inputs": [
            {"name": "from", "type": "address"},
            {"name": "to", "type": "address"},
            {"name": "tokenId", "type": "uint256"}
        ],
        "name": "transferFrom",
        "outputs": [],
        "type": "function"
    }]"#)?;

    let contract = Contract::new(nft_contract_address, abi, client.clone());

    // 构建交易
    let call = contract.method::<_, H256>("transferFrom", (client.address(), recipient, token_id))?;
    let pending_tx = call.send().await?;

    // 等待交易确认
    let receipt = pending_tx.confirmations(3).await?;

    match receipt {
        Some(receipt) => println!("交易成功，交易哈希: {:?}", receipt.transaction_hash),
        None => println!("交易未确认"),
    }

    Ok(())
}
